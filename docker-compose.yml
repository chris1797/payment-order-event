version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    platform: linux/amd64
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    platform: linux/amd64
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"     # 호스트에서 접속 (Spring Boot 설정: localhost:9092)
      - "29092:29092"   # 도커 내부 컨테이너 간 통신용
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    platform: linux/amd64
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"   # application.yml 에서 사용: http://localhost:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092

  # 선택: 초기 토픽 만들어두기
  kafka-topics-init:
    image: confluentinc/cp-kafka:7.6.0
    platform: linux/amd64
    container_name: kafka-topics-init
    depends_on:
      - kafka
    entrypoint: ["/bin/bash","-c"]
    command: >
      "
      echo 'waiting for kafka...'; sleep 5;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order.events --partitions 6 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.events --partitions 6 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic inventory.events --partitions 6 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic notification.events --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order.events.DLQ --partitions 3 --replication-factor 1;
      echo 'topics ready';
      "
    restart: "no"